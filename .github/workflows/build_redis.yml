name: Build Redis images

on:
  workflow_call:
    inputs:
      image_suffix:
        description: 'Image version to generate'
        required: true
        default: '-dev'
        type: string
      image:
        description: 'Image type to build'
        default: "redis"
        required: false
        type: string
      registry:
        description: 'Registry to deploy to'
        default: "ghcr.io/agence-adeliom"
        required: true
        type: string
      push_image:
        description: 'Push images to registry'
        required: true
        type: boolean
        default: false
    outputs:
      repository:
        value: ${{ jobs.redis.outputs.repository }}

permissions:
  contents: read
  packages: write

jobs:
  redis:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ["6.2", "7.0", "7.2", "7.4"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🔐 Connexion à Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      # 🔐 Connexion à GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get latest tag (auto)
        id: get_tag
        run: |
          if [ "${{ inputs.image_suffix }}" = "-dev" ]; then
            tag="dev"
          else
            if [ "${{ inputs.image_suffix }}" = "-{{latest_release_tag}}" ]; then
              tag=$(git describe --tags --abbrev=0)
            else
              tag=""
            fi
          fi
          if [ -n "$tag" ]; then
            tag="-$tag"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      
      - name: Set image tag
        run: echo "IMAGE_TAG=${{ inputs.registry }}/${{ inputs.image }}:${{ matrix.version }}" >> $GITHUB_OUTPUT
        id: image_tag
      
      - name: Set Docker tags
        id: tags
        run: |
          {
            echo 'tags<<EOF'
            echo "${{ steps.image_tag.outputs.IMAGE_TAG }}${{ steps.get_tag.outputs.tag }}"
            # Tag "latest" pour la version 7.4
            if [ "${{ matrix.version }}" = "7.4" ] && [ "${{ inputs.image_suffix }}" != "-dev" ]; then
              echo "${{ inputs.registry }}/${{ inputs.image }}:latest"
            fi
            # Tags majeurs (6, 7)
            major_version=$(echo "${{ matrix.version }}" | cut -d. -f1)
            echo "${{ inputs.registry }}/${{ inputs.image }}:${major_version}${{ steps.get_tag.outputs.tag }}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
      
      - name: Set repository
        run: echo "REPOSITORY=${{ inputs.registry }}/${{ inputs.image }}" >> $GITHUB_OUTPUT
        id: repository
      
      - name: Build image amd64
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile
          platforms: "linux/amd64"
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            REDIS_VERSION=${{ matrix.version }}

      - name: Test Redis image
        run: |
          # Démarrer le conteneur Redis
          docker run -d --name test-redis \
            -e REDIS_PASSWORD=test123 \
            ${{ steps.image_tag.outputs.IMAGE_TAG }}${{ steps.get_tag.outputs.tag }}
          
          # Attendre que Redis soit prêt
          sleep 5
          
          # Tester la connexion
          docker exec test-redis redis-cli -a test123 ping
          
          # Tester une commande SET/GET
          docker exec test-redis redis-cli -a test123 SET test "Hello Adeliom"
          docker exec test-redis redis-cli -a test123 GET test
          
          # Vérifier les infos Redis
          docker exec test-redis redis-cli -a test123 INFO server | grep redis_version
          
          # Nettoyer
          docker stop test-redis
          docker rm test-redis

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile
          platforms: "linux/amd64,linux/arm64"
          push: ${{ inputs.push_image }}
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            REDIS_VERSION=${{ matrix.version }}
