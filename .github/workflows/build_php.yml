name: Build images

on:
  workflow_call:
    inputs:
      image_suffix:
        description: 'Image version to generate'
        required: true
        default: '-dev'
        type: string
      image:
        description: 'Image type to build'
        default: "php"
        required: false
        type: string
      registry:
        description: 'Registry to deploy to'
        default: "ghcr.io/agence-adeliom"
        required: true
        type: string
      push_image:
        description: 'Push images to registry'
        required: true
        type: boolean
        default: false
    outputs:
      repository:
        value: ${{ jobs.base-images.repository.outputs.REPOSITORY }}

permissions:
  contents: read
  packages: write

jobs:
  frankenphp:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ["8.2", "8.3"]
        variant: [frankenphp]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🔐 Connexion à Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      # 🔐 Connexion à GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get latest tag (auto)
        id: get_tag
        run: |
          if [ "${{ inputs.image_suffix }}" = "-dev" ]; then
            tag="dev"
          else
            if [ "${{ inputs.image_suffix }}" = "-{{latest_release_tag}}" ]; then
              tag=$(git describe --tags --abbrev=0)
            else
              tag=""
            fi
          fi
          if [ -n "$tag" ]; then
            tag="-$tag"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      - name: Set image tag
        run: echo "IMAGE_TAG=${{ inputs.registry }}/${{ inputs.image }}:${{ matrix.version }}-${{ matrix.variant }}" >> $GITHUB_OUTPUT
        id: image_tag
      - name: Set Docker tags
        id: tags
        run: |
          {
            echo 'tags<<EOF'
            echo "${{ steps.image_tag.outputs.IMAGE_TAG }}${{ steps.get_tag.outputs.tag }}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
      - name: Set repository
        run: echo "REPOSITORY=${{ inputs.registry }}/${{ inputs.image }}" >> $GITHUB_OUTPUT
        id: repository
      - name: Build image amd64
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          platforms: "linux/amd64"
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}
      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          #platforms: "linux/amd64,linux/arm64"
          platforms: "linux/amd64"
          push: ${{ inputs.push_image }}
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}

  base:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ["8.1", "8.2", "8.3", "8.4"]
        variant: [cli, fpm]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🔐 Connexion à Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      # 🔐 Connexion à GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get latest tag (auto)
        id: get_tag
        run: |
          if [ "${{ inputs.image_suffix }}" = "-dev" ]; then
            tag="dev"
          else
            if [ "${{ inputs.image_suffix }}" = "-{{latest_release_tag}}" ]; then
              tag=$(git describe --tags --abbrev=0)
            else
              tag=""
            fi
          fi
          if [ -n "$tag" ]; then
            tag="-$tag"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      - name: Set image tag
        run: echo "IMAGE_TAG=${{ inputs.registry }}/${{ inputs.image }}:${{ matrix.version }}-${{ matrix.variant }}" >> $GITHUB_OUTPUT
        id: image_tag
      - name: Set Docker tags
        id: tags
        run: |
          {
            echo 'tags<<EOF'
            echo "${{ steps.image_tag.outputs.IMAGE_TAG }}${{ steps.get_tag.outputs.tag }}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
      - name: Set repository
        run: echo "REPOSITORY=${{ inputs.registry }}/${{ inputs.image }}" >> $GITHUB_OUTPUT
        id: repository
      - name: Build image amd64
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          platforms: "linux/amd64"
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          #platforms: "linux/amd64,linux/arm64"
          platforms: "linux/amd64"
          push: ${{ inputs.push_image }}
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}

  wkhtmltopdf:
    runs-on: ubuntu-latest
    needs: [base]
    strategy:
      fail-fast: false
      matrix:
        version: ["8.1", "8.2", "8.3", "8.4"]
        variant: [fpm-wkhtmltopdf, cli-wkhtmltopdf]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # 🔐 Connexion à Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      # 🔐 Connexion à GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get latest tag (auto)
        id: get_tag
        run: |
          if [ "${{ inputs.image_suffix }}" = "-dev" ]; then
            tag="dev"
          else
            if [ "${{ inputs.image_suffix }}" = "-{{latest_release_tag}}" ]; then
              tag=$(git describe --tags --abbrev=0)
            else
              tag=""
            fi
          fi
          if [ -n "$tag" ]; then
            tag="-$tag"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      - name: Set image tag
        run: echo "IMAGE_TAG=${{ inputs.registry }}/${{ inputs.image }}:${{ matrix.version }}-${{ matrix.variant }}" >> $GITHUB_OUTPUT
        id: image_tag
      - name: Set Docker tags
        id: tags
        run: |
          {
            echo 'tags<<EOF'
            echo "${{ steps.image_tag.outputs.IMAGE_TAG }}${{ steps.get_tag.outputs.tag }}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
      - name: Set repository
        run: echo "REPOSITORY=${{ inputs.registry }}/${{ inputs.image }}" >> $GITHUB_OUTPUT
        id: repository
      - name: Build image amd64
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          platforms: "linux/amd64"
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}
      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          #platforms: "linux/amd64,linux/arm64"
          platforms: "linux/amd64"
          push: ${{ inputs.push_image }}
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}

  caddy:
    runs-on: ubuntu-latest
    needs: [base, wkhtmltopdf]
    strategy:
      fail-fast: false
      matrix:
        version: ["8.1", "8.2", "8.3", "8.4"]
        variant: [caddy, caddy-wkhtmltopdf]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🔐 Connexion à Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      # 🔐 Connexion à GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get latest tag (auto)
        id: get_tag
        run: |
          if [ "${{ inputs.image_suffix }}" = "-dev" ]; then
            tag="dev"
          else
            if [ "${{ inputs.image_suffix }}" = "-{{latest_release_tag}}" ]; then
              tag=$(git describe --tags --abbrev=0)
            else
              tag=""
            fi
          fi
          if [ -n "$tag" ]; then
            tag="-$tag"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      - name: Set image tag
        run: echo "IMAGE_TAG=${{ inputs.registry }}/${{ inputs.image }}:${{ matrix.version }}-${{ matrix.variant }}" >> $GITHUB_OUTPUT
        id: image_tag
      - name: Set Docker tags
        id: tags
        run: |
          {
            echo 'tags<<EOF'
            echo "${{ steps.image_tag.outputs.IMAGE_TAG }}${{ steps.get_tag.outputs.tag }}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
      - name: Set repository
        run: echo "REPOSITORY=${{ inputs.registry }}/${{ inputs.image }}" >> $GITHUB_OUTPUT
        id: repository
      - name: Build image amd64
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          platforms: "linux/amd64"
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          #platforms: "linux/amd64,linux/arm64"
          platforms: "linux/amd64"
          push: ${{ inputs.push_image }}
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}

  nginx:
    runs-on: ubuntu-latest
    needs: [base, wkhtmltopdf]
    strategy:
      fail-fast: false
      matrix:
        version: ["8.1", "8.2", "8.3", "8.4"]
        variant: [nginx, nginx-wkhtmltopdf]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # 🔐 Connexion à Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      # 🔐 Connexion à GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get latest tag (auto)
        id: get_tag
        run: |
          if [ "${{ inputs.image_suffix }}" = "-dev" ]; then
            tag="dev"
          else
            if [ "${{ inputs.image_suffix }}" = "-{{latest_release_tag}}" ]; then
              tag=$(git describe --tags --abbrev=0)
            else
              tag=""
            fi
          fi
          if [ -n "$tag" ]; then
            tag="-$tag"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      - name: Set image tag
        run: echo "IMAGE_TAG=${{ inputs.registry }}/${{ inputs.image }}:${{ matrix.version }}-${{ matrix.variant }}" >> $GITHUB_OUTPUT
        id: image_tag
      - name: Set Docker tags
        id: tags
        run: |
          {
            echo 'tags<<EOF'
            echo "${{ steps.image_tag.outputs.IMAGE_TAG }}${{ steps.get_tag.outputs.tag }}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
      - name: Set repository
        run: echo "REPOSITORY=${{ inputs.registry }}/${{ inputs.image }}" >> $GITHUB_OUTPUT
        id: repository
      - name: Build image amd64
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          platforms: "linux/amd64"
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}
      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          #platforms: "linux/amd64,linux/arm64"
          platforms: "linux/amd64"
          push: ${{ inputs.push_image }}
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}

  apache:
    runs-on: ubuntu-latest
    needs: [base, wkhtmltopdf]
    strategy:
      fail-fast: false
      matrix:
        version: ["8.1", "8.2", "8.3", "8.4"]
        variant: [apache, apache-wkhtmltopdf]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🔐 Connexion à Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      # 🔐 Connexion à GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get latest tag (auto)
        id: get_tag
        run: |
          if [ "${{ inputs.image_suffix }}" = "-dev" ]; then
            tag="dev"
          else
            if [ "${{ inputs.image_suffix }}" = "-{{latest_release_tag}}" ]; then
              tag=$(git describe --tags --abbrev=0)
            else
              tag=""
            fi
          fi
          if [ -n "$tag" ]; then
            tag="-$tag"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      - name: Set image tag
        run: echo "IMAGE_TAG=${{ inputs.registry }}/${{ inputs.image }}:${{ matrix.version }}-${{ matrix.variant }}" >> $GITHUB_OUTPUT
        id: image_tag
      - name: Set Docker tags
        id: tags
        run: |
          {
            echo 'tags<<EOF'
            echo "${{ steps.image_tag.outputs.IMAGE_TAG }}${{ steps.get_tag.outputs.tag }}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
      - name: Set repository
        run: echo "REPOSITORY=${{ inputs.registry }}/${{ inputs.image }}" >> $GITHUB_OUTPUT
        id: repository
      - name: Build image amd64
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          platforms: "linux/amd64"
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}
      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.image }}
          file: ./${{ inputs.image }}/Dockerfile.${{ matrix.variant }}
          #platforms: "linux/amd64,linux/arm64"
          platforms: "linux/amd64"
          push: ${{ inputs.push_image }}
          tags: |
            ${{ steps.tags.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ matrix.version }}
            REGISTRY=${{ inputs.registry }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag }}
